import json
from aiogram import Bot, Router, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType, Message
from aiogram.fsm.context import FSMContext
from config import ADMIN_CHAT_ID, CHANNEL_ID, ADMIN_ID, CHANNEL_LINK
from fsm_states import BuySticker, Application
from settings import get_settings
import referrals

router = Router()

pending_requests = {}  # message_id –∑–∞—è–≤–∫–∏: user_id


def get_users():
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []


@router.message(CommandStart())
async def cmd_start(message: Message, command):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø—Ä–∏ /start (–±–µ–∑ –∑–∞—á—ë—Ç–∞)
    args = command.args or ""
    if referrals.is_active() and args.startswith("ref_"):
        try:
            referrer_id = int(args.split("_", 1)[1])
        except ValueError:
            referrer_id = None

        user_key = str(message.from_user.id)
        data = referrals.load_data()
        if referrer_id and referrer_id != message.from_user.id:
            if user_key not in data["users"]:
                data["users"][user_key] = {"referrer": referrer_id, "counted": False}
                referrals.save_data(data)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
    user_id = message.from_user.id
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except Exception:
        users = []
    if user_id not in users:
        users.append(user_id)
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úç–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="‚Äº–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")],
    ])
    await message.answer(
        "üéâ –ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥! \n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Rusinov&Dedyukhin –±–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π! \n"
        "üéâ –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –∫–ª–∞—Å—Å–Ω—ã–µ –ø—Ä–∏–∑—ã, —É–¥–∞—á–∞ –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! ü•≥\n\n"
        "ü§ù –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—Å—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        "üëâ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n"
        "üëâ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n\n"
        "üöÄ –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî –ø—Ä–∏–∑—ã —É–∂–µ –∂–¥—É—Ç —Å–≤–æ–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéÅ\n"
        "–£–¥–∞—á–∏ —Ç–µ–±–µ! üçÄ",
        reply_markup=kb
    )


@router.callback_query(lambda c: c.data == "check_sub")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ("member", "creator", "administrator"):
            # –ó–∞—á—ë—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            data = referrals.load_data()
            threshold = data.get("threshold", 3)
            active = data.get("active", True)

            user_key = str(user_id)
            user_data = data["users"].get(user_key)
            if user_data and not user_data.get("counted", False):
                referrer_id = int(user_data["referrer"])
                ref_key = str(referrer_id)
                ref_info = data["referrers"].setdefault(
                    ref_key, {"referred": [], "tickets": [], "round_count": 0}
                )

                # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É—á—ë—Ç (–≤–æ–æ–±—â–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É)
                if user_id not in ref_info["referred"]:
                    ref_info["referred"].append(user_id)

                # –í —Ç–µ–∫—É—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                if active:
                    ref_info["round_count"] = int(ref_info.get("round_count", 0)) + 1

                    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ
                    try:
                        progress = ref_info["round_count"] % threshold
                        remain = threshold - progress if progress != 0 else 0
                        await bot.send_message(
                            referrer_id,
                            (
                                "üë• –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n"
                                f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {ref_info['round_count']}/{threshold}.\n"
                                f"{'–î–æ –±–∏–ª–µ—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ' + str(remain) if remain else '–°–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç–µ –±–∏–ª–µ—Ç!'}"
                            )
                        )
                    except Exception:
                        pass

                    # –ë–∏–ª–µ—Ç –∫–∞–∂–¥—ã–µ threshold
                    if threshold > 0 and (ref_info["round_count"] % threshold == 0):
                        code = referrals.generate_unique_code(data)
                        ref_info["tickets"].append(code)

                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ä–µ—Ñ–µ—Ä–µ—Ä—É)
                        try:
                            await bot.send_message(
                                referrer_id,
                                (
                                    "üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç!\n"
                                    f"–í–∞—à –∫–æ–¥: <b>{code}</b>\n\n"
                                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ ‚Äî –ø–æ —ç—Ç–∏–º –∫–æ–¥–∞–º –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à."
                                ),
                                parse_mode="HTML"
                            )
                        except Exception:
                            pass

                        # –ê–¥–º–∏–Ω—É
                        try:
                            ref_chat = await bot.get_chat(referrer_id)
                            ref_name = f"@{ref_chat.username}" if ref_chat.username else (ref_chat.full_name or f"id{referrer_id}")
                        except Exception:
                            ref_name = f"id{referrer_id}"
                        try:
                            await bot.send_message(
                                ADMIN_CHAT_ID,
                                f"üéü –í—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç {ref_name} ‚Äî –∫–æ–¥: <b>{code}</b> (–ø–æ—Ä–æ–≥ {threshold})",
                                parse_mode="HTML"
                            )
                        except Exception:
                            pass

                # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –∫–∞–∫ —É—á—Ç—ë–Ω–Ω–æ–≥–æ (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å)
                data["users"][user_key]["counted"] = True
                referrals.save_data(data)

            kb_buy = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéü–ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä", callback_data="start_buy")],
                [InlineKeyboardButton(text="ü§ù–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞", callback_data="referral_info")],
            ])
            await callback.message.answer(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏! ü§ó –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã! üéÅ‚ú®\n\n"
                "üéü –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –∫—É–ø–∏ —Å—Ç–∏–∫–µ—Ä—ã (–æ–Ω–∏ –∂–µ –±–∏–ª–µ—Ç—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ)!\n"
                "–ß–µ–º –±–æ–ª—å—à–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É! üî•\n\n"
                "ü§ù –†–∞–∑–¥–µ–ª ¬´–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê¬ª\n"
                "–î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n\n"
                "–£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ –ú—ã –≤–µ—Ä–∏–º, –∏–º–µ–Ω–Ω–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º! üèÜ\n\n"
                "‚ùóÔ∏è–ü–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º: @CuttySark_81",
                reply_markup=kb_buy
            )
        else:
            await callback.message.answer("‚ùó –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    except Exception:
        await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()


@router.callback_query(lambda c: c.data == "start_buy")
async def start_buy_sticker(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    price = get_settings()["price_per_ticket"]
    await callback.message.answer(
        "üìã –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ (–æ–Ω–∏ –∂–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ) –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n\n"
        f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ ‚Äî {price:.2f} —Ä—É–±.\n\n"
        "üéü –ë–æ–ª—å—à–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ ‚Äî –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø–æ–±–µ–¥—É! –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑! üèÜüéÅ\n\n"
        "–ñ–¥—ë–º —Ç–≤–æ–π –≤—ã–±–æ—Ä! ‚¨áÔ∏è"
    )
    await state.set_state(BuySticker.waiting_qty)


@router.message(StateFilter(BuySticker.waiting_qty))
async def process_qty(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    qty = int(text)
    await state.update_data(qty=qty)
    settings = get_settings()
    total = qty * settings["price_per_ticket"]
    if settings.get("payment_image_file_id"):
        await message.answer_photo(settings["payment_image_file_id"])
    await message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n\n"
        f"üéâ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {qty} —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É {total:.0f} —Ä—É–±. üí∏\n\n"
        f"üìå –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
        f" 1. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞ üì±\n"
        f" 2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –Ω–∏–∂–µ\n"
        f" 3. –í–≤–µ–¥–∏ —Å—É–º–º—É {total:.0f} —Ä—É–±. –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        f" 4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ ‚úÖ\n\n"
        f"üîó –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å—Å—ã–ª–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        f"üéüÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ —Å–ª–µ–¥—É–π—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º!\n"
        f"üî• –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! üçÄ"
    )
    await message.answer(
        "üìù –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫!\n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ —Å—Ç–∏–∫–µ—Ä—ã (–±–∏–ª–µ—Ç—ã), –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂.\n\n"
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    await state.set_state(Application.waiting_fio)


@router.message(StateFilter(Application.waiting_fio))
async def process_fio(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º.")
        return
    fio = message.text.strip()
    if len(fio.split()) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return
    await state.update_data(fio=fio)
    await message.answer(
        "üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79000000000:\n\n"
        "‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üëá\n\n"
        "üèÜ –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞"
    )
    await state.set_state(Application.waiting_phone)


@router.message(StateFilter(Application.waiting_phone))
async def process_phone(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    phone = message.text.strip()
    if not (phone.startswith("+") and phone[1:].isdigit()):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=phone)
    await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ:\n\n"
        "‚ÄºÔ∏è –í–∞–∂–Ω–æ:\n"
        "üîπ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–µ–∫ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã.\n"
        "üîπ –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —á—É–∂–∏–µ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —á–µ–∫–∏ ‚Äî –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏ —Å—Ç—Ä–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ –§–ò–û –∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    )
    await state.set_state(Application.waiting_photo)


@router.message(StateFilter(Application.waiting_photo))
async def process_photo(message: Message, state: FSMContext, bot: Bot):
    file_id = None
    if message.content_type == ContentType.PHOTO:
        file_id = message.photo[-1].file_id
        mime = "image/photo"
    elif message.content_type == ContentType.DOCUMENT:
        mime = message.document.mime_type
        if mime in ("application/pdf", "image/jpeg", "image/png", "image/jpg", "image/webp"):
            file_id = message.document.file_id
        else:
            await message.answer("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpeg, png, webp) –∏–ª–∏ PDF-—Ñ–∞–π–ª.")
            return
    else:
        await message.answer("‚ùó–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –∏–ª–∏ PDF-—Ñ–∞–π–ª.")
        return

    data = await state.get_data()
    qty = data.get('qty')
    text = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ {data.get('fio')}\n"
        f"üì± {data.get('phone')}\n"
        f"üì¶ {qty} —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
        f"üñº –§–æ—Ç–æ/—á–µ–∫:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="approve"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject")]
    ])
    sent = None
    if file_id and (message.content_type == ContentType.PHOTO or (message.content_type == ContentType.DOCUMENT and mime.startswith("image/"))):
        sent = await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=file_id, caption=text, parse_mode="HTML", reply_markup=kb)
    elif file_id and message.content_type == ContentType.DOCUMENT and mime == "application/pdf":
        sent = await bot.send_document(chat_id=ADMIN_CHAT_ID, document=file_id, caption=text, parse_mode="HTML", reply_markup=kb)
    if sent:
        pending_requests[sent.message_id] = message.from_user.id
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
        "–ú—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –ï—Å–ª–∏ –≤—ã –≤—Å—ë —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –±–∏–ª–µ—Ç—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç —É –≤–∞—Å! üéü‚ú®\n\n"
        "‚è≥ –í —Å–≤—è–∑–∏ —Å –æ–ø–ª–∞—Ç–æ–π –±–∞–Ω–∫–∏–Ω–≥–∞ –∏ —Å–≤–µ—Ä–∫–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞ –∏ –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å –Ω–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è.\n\n"
        "üì© –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç—ë–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üéâ\n\n"
        "‚ùó–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –ø—Ä–æ—à–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
       "@CuttySark_81"
    )
    await state.clear()


@router.callback_query(lambda c: c.data == "referral_info")
async def referral_info(callback: CallbackQuery):
    user_key = str(callback.from_user.id)
    data = referrals.load_data()
    ref_info = data.get("referrers", {}).get(user_key, {"referred": [], "tickets": [], "round_count": 0})
    total_referred = len(ref_info.get("referred", []))
    tickets = [str(x) for x in ref_info.get("tickets", [])]
    me = await callback.bot.get_me()
    link = f"https://t.me/{me.username}?start=ref_{callback.from_user.id}"
    text = (
        f"üìä <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–æ–≤–æ–¥–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ ‚Äî –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n"
        "–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ –∏ –≤—ã—à–µ —à–∞–Ω—Å –∑–∞–±—Ä–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã! üéÅ\n\n"
        "‚ÄºÔ∏è –í–∞–∂–Ω–æ:\n"
        "1Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞, –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n"
        "2Ô∏è‚É£ –ß—Ç–æ–±—ã –¥—Ä—É–≥ –∑–∞—Å—á–∏—Ç–∞–ª—Å—è, –æ–Ω –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{total_referred}</b>\n"
        f"üé´ –ü–æ–ª—É—á–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: <b>{len(tickets)}</b>\n"
    )
    if tickets:
        text += "–ù–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: " + ", ".join(tickets) + "\n\n"
    text += f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}"
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data in ("approve", "reject"))
async def handle_decision(callback: CallbackQuery, bot: Bot):
    user_id = pending_requests.get(callback.message.message_id)
    if not user_id:
        await callback.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        chat = await bot.get_chat(user_id)
        user_display = f"@{chat.username}" if chat.username else (chat.full_name or f"id{user_id}")
    except Exception:
        user_display = f"id{user_id}"

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    buy_more_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –µ—â—ë —Å—Ç–∏–∫–µ—Ä—ã", callback_data="start_buy")]]
    )

    if callback.data == "approve":
        msg = (
            "‚úÖ –í—ã –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–ø–∞—Å–∏–±–æ!\n"
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n\n"
            "üéüÔ∏è –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å–≤–æ–π –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µüëá\n\n"
            "https://docs.google.com/spreadsheets/d/1PvxOM2ZCqSKT8djc_3xy5RlE0mMIKKSa-7V2ZwuwYSI/edit?usp=drivesdk\n\n"
            "üçÄ –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n"
            "üëá –•–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã?\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –µ—â—ë —Å—Ç–∏–∫–µ—Ä—ã, –≥–æ—É üëá"
        )
        await bot.send_message(user_id, msg, reply_markup=buy_more_kb)
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            reply_to_message_id=callback.message.message_id
        )
    else:
        msg = (
            "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            "‚ùóÔ∏è–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—à—ë–ª –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
            "üí∏ –ï—Å–ª–∏ –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞—è–≤–∫—É –æ—à–∏–±–æ—á–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.\n\n"
            "ü§ù –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –æ—à–∏–±–∫–µ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @CuttySark_81"
        )
        await bot.send_message(user_id, msg, reply_markup=buy_more_kb)
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            reply_to_message_id=callback.message.message_id
        )

    await callback.answer("–ì–æ—Ç–æ–≤–æ.")


# ---------------------------
# –ë–õ–û–ö–ò–†–û–í–ö–ê –õ–Æ–ë–´–• –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –í–ù–ï –°–¶–ï–ù–ê–†–ò–Ø (–°–¢–†–û–ì–û –í –ö–û–ù–¶–ï –§–ê–ô–õ–ê)
# ---------------------------
@router.message(StateFilter(None))
async def block_any_message(message: types.Message, state: FSMContext):
    if message.text and message.text.startswith('/'):
        return
    if message.from_user.id == ADMIN_ID:
        return
    pass
