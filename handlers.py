import json
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from config import ADMIN_CHAT_ID, CHANNEL_ID
from fsm_states import BuySticker, Application
from settings import get_settings
from support_status import is_support_open
from config import ADMIN_ID

dp = Dispatcher(storage=MemoryStorage())
ack_messages = {}
code_to_user = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    invite_link = f"https://t.me/c/{str(CHANNEL_ID)[4:]}/"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=invite_link)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.", reply_markup=kb)

@dp.callback_query(lambda c: c.data == "check_sub")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ("member", "creator", "administrator"):
            kb_buy = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä", callback_data="start_buy")]
            ])
            await callback.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_buy)
        else:
            await callback.message.answer("‚ùó –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    except Exception:
        await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "start_buy")
async def start_buy_sticker(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    price = get_settings()["price_per_ticket"]
    await callback.message.answer(f"üìã –ù–∞–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (—á–∏—Å–ª–æ–º). –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ ‚Äî {price:.2f} —Ä—É–±.")
    await state.set_state(BuySticker.waiting_qty)

@dp.message(StateFilter(BuySticker.waiting_qty))
async def process_qty(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    qty = int(text)
    await state.update_data(qty=qty)
    settings = get_settings()
    total = qty * settings["price_per_ticket"]
    if settings["payment_image_file_id"]:
        await message.answer_photo(settings["payment_image_file_id"])
    await message.answer(f"üìå –î–ª—è –ø–æ–∫—É–ø–∫–∏ {qty} —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É: *{total:.2f} —Ä—É–±.*\n\nüîó –°—Å—ã–ª–∫–∞: https://example.com/pay?amount={total:.2f}", parse_mode="Markdown")
    await message.answer("‚úè –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(Application.waiting_fio)

@dp.message(StateFilter(Application.waiting_fio))
async def process_fio(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º.")
        return
    fio = message.text.strip()
    if len(fio.split()) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return
    await state.update_data(fio=fio)
    await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Application.waiting_phone)

@dp.message(StateFilter(Application.waiting_phone))
async def process_phone(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    phone = message.text.strip()
    if not (phone.startswith("+") and phone[1:].isdigit()):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=phone)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
    await state.set_state(Application.waiting_photo)

@dp.message(StateFilter(Application.waiting_photo), lambda m: m.content_type in (ContentType.PHOTO, ContentType.DOCUMENT))
async def process_photo(message: types.Message, state: FSMContext, bot: Bot):
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    data = await state.get_data()
    code = uuid.uuid4().hex[:8].upper()
    code_to_user[code] = message.from_user.id
    ack_messages[message.from_user.id] = code
    text = f"üéü *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{code}*\n\nüë§ {data['fio']}\nüì± {data['phone']}\nüì¶ {data['qty']} —Å—Ç–∏–∫–µ—Ä–æ–≤\nüñº –§–æ—Ç–æ —á–µ–∫–∞:"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{code}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{code}")]
    ])
    await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=file_id, caption=text, parse_mode="Markdown", reply_markup=kb)
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("approve:") or c.data.startswith("reject:"))
async def handle_decision(callback: CallbackQuery, bot: Bot):
    action, code = callback.data.split(":")
    user_id = code_to_user.get(code)
    if not user_id:
        await callback.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if action == "approve":
        msg = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ *–æ–¥–æ–±—Ä–µ–Ω–∞!* (–Ω–æ–º–µ—Ä: #{code})"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –µ—â—ë —Å—Ç–∏–∫–µ—Ä—ã", callback_data="start_buy")]
        ])
        await bot.send_message(user_id, msg, parse_mode="Markdown", reply_markup=kb)
    else:
        msg = "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ *–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!*"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data=f"support:{code}")]
        ])
        await bot.send_message(user_id, msg, parse_mode="Markdown", reply_markup=kb)

    await callback.answer("–ì–æ—Ç–æ–≤–æ.")

# ---------------------------
# –ë–õ–û–ö–ò–†–û–í–ö–ê –õ–Æ–ë–´–• –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –í–ù–ï –°–¶–ï–ù–ê–†–ò–Ø
# ---------------------------
@dp.message(StateFilter(None))
async def block_any_message(message: types.Message, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ support –æ–∫–Ω–æ
    if is_support_open(message.from_user.id):
        return
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.from_user.id == ADMIN_ID:
        return
    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–ª–æ–∫–∏—Ä—É–µ–º (–Ω–∏–∫–∞–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º)
    pass
