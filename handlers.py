import json
import uuid
from aiogram import Bot, Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType, Message
from aiogram.fsm.context import FSMContext
from config import ADMIN_CHAT_ID, CHANNEL_ID, ADMIN_ID
from fsm_states import BuySticker, Application, AdminPanel
from settings import get_settings, update_settings
from support_status import is_support_open
from config import CHANNEL_LINK

router = Router()

ack_messages = {}
code_to_user = {}
user_codes = {}  # –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å: code -> [codes]

def get_users():
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
        return users
    except Exception:
        return []

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # --- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except Exception:
        users = []

    if user_id not in users:
        users.append(user_id)
        with open("users.json", "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ])
    await message.answer(
        "üéâ –ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥! \n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Rusinov&Dedyukhin –±–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π! \n"
        "üéâ –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç –∫–ª–∞—Å—Å–Ω—ã–µ –ø—Ä–∏–∑—ã, —É–¥–∞—á–∞ –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! ü•≥\n\n"
        "ü§ù –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—Å—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        "üëâ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n"
        "üëâ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n\n"
        "üöÄ –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî –ø—Ä–∏–∑—ã —É–∂–µ –∂–¥—É—Ç —Å–≤–æ–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéÅ\n"
        "–£–¥–∞—á–∏ —Ç–µ–±–µ! üçÄ",
        reply_markup=kb
    )

# --- –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ---

@router.callback_query(lambda c: c.data == "check_sub")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ("member", "creator", "administrator"):
            kb_buy = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä", callback_data="start_buy")]
            ])
            await callback.message.answer(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏! ü§ó –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã! üéÅ‚ú®\n\n"
                "üéü –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –∫—É–ø–∏ —Å—Ç–∏–∫–µ—Ä—ã (–æ–Ω–∏ –∂–µ –±–∏–ª–µ—Ç—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ)!\n"
                "–ß–µ–º –±–æ–ª—å—à–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É! üî•\n\n"
                "üì• –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä¬ª –∏ –≤–≤–µ–¥–∏, —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.\n\n"
                "–£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üçÄ –ú—ã –≤–µ—Ä–∏–º, –∏–º–µ–Ω–Ω–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º! üèÜ \n\n"
                "‚ùóÔ∏è–ü–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º: @CuttySark_81",
                reply_markup=kb_buy
            )
        else:
            await callback.message.answer("‚ùó –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    except Exception:
        await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---

@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    settings = get_settings()
    price = settings.get("price_per_ticket", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
    photo = settings.get("payment_image_file_id", "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞", callback_data="admin_change_price")],
        [InlineKeyboardButton(text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã", callback_data="admin_change_image")],
        [InlineKeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_view_settings")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
    ])
    text = (
        f"üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üíµ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: <b>{price}</b> —Ä—É–±.\n"
        f"üñº –§–æ—Ç–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{photo}</code>"
    )
    await message.answer(text, reply_markup=kb, parse_mode="HTML")

@router.callback_query(lambda c: c.data == "admin_view_settings")
async def view_settings(callback: CallbackQuery):
    settings = get_settings()
    price = settings.get("price_per_ticket", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
    photo = settings.get("payment_image_file_id", "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    text = (
        f"üíµ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: <b>{price}</b> —Ä—É–±.\n"
        f"üñº –§–æ—Ç–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{photo}</code>"
    )
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_change_price")
async def change_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):")
    await state.set_state(AdminPanel.waiting_new_price)
    await callback.answer()

@router.message(AdminPanel.waiting_new_price)
async def set_price(message: Message, state: FSMContext):
    text = message.text.strip().replace(',', '.')
    try:
        price = float(text)
    except Exception:
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 950)")
    update_settings({"price_per_ticket": price})
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price:.2f} —Ä—É–±.")
    await state.clear()

@router.callback_query(lambda c: c.data == "admin_change_image")
async def change_image(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.")
    await state.set_state(AdminPanel.waiting_new_image)
    await callback.answer()

@router.message(AdminPanel.waiting_new_image, lambda m: m.photo is not None)
async def set_image(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    update_settings({"payment_image_file_id": file_id})
    await message.answer("‚úÖ –§–æ—Ç–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.message(AdminPanel.waiting_new_image)
async def wrong_image(message: Message):
    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# --- –†–ê–°–°–´–õ–ö–ê ---

@router.callback_query(lambda c: c.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úâÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é).\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."
    )
    await state.set_state(AdminPanel.waiting_broadcast)
    await callback.answer()

@router.message(AdminPanel.waiting_broadcast, lambda m: m.photo is not None)
async def receive_broadcast_photo(message: Message, state: FSMContext):
    await state.update_data(
        broadcast_type="photo",
        file_id=message.photo[-1].file_id,
        caption=message.caption or ""
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ])
    await message.answer_photo(
        message.photo[-1].file_id,
        caption=message.caption or "(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)",
        reply_markup=kb
    )
    await state.set_state(AdminPanel.confirm_broadcast)

@router.message(AdminPanel.waiting_broadcast, lambda m: m.video is not None)
async def receive_broadcast_video(message: Message, state: FSMContext):
    await state.update_data(
        broadcast_type="video",
        file_id=message.video.file_id,
        caption=message.caption or ""
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ])
    await message.answer_video(
        message.video.file_id,
        caption=message.caption or "(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)",
        reply_markup=kb
    )
    await state.set_state(AdminPanel.confirm_broadcast)

@router.message(AdminPanel.waiting_broadcast)
async def receive_broadcast_text(message: Message, state: FSMContext):
    await state.update_data(
        broadcast_type="text",
        text=message.text
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ])
    await message.answer(
        f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}",
        reply_markup=kb
    )
    await state.set_state(AdminPanel.confirm_broadcast)

@router.callback_query(lambda c: c.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(lambda c: c.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users = get_users()
    success = 0
    failed = 0

    await callback.message.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

    for user_id in users:
        try:
            if data.get("broadcast_type") == "photo":
                await callback.bot.send_photo(
                    user_id, data["file_id"], caption=data.get("caption", "")
                )
            elif data.get("broadcast_type") == "video":
                await callback.bot.send_video(
                    user_id, data["file_id"], caption=data.get("caption", "")
                )
            elif data.get("broadcast_type") == "text":
                await callback.bot.send_message(
                    user_id, data["text"]
                )
            success += 1
        except (TelegramBadRequest, TelegramForbiddenError):
            failed += 1
        except Exception:
            failed += 1

    await callback.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed}")
    await state.clear()
    await callback.answer()

# --- –ö–£–ü–ò–¢–¨ –°–¢–ò–ö–ï–†/–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ---

@router.callback_query(lambda c: c.data == "start_buy")
async def start_buy_sticker(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    price = get_settings()["price_per_ticket"]
    await callback.message.answer(
        "üìã –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ (–æ–Ω–∏ –∂–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ) –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n\n"
        f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ ‚Äî {price:.2f} —Ä—É–±.\n\n"
        "üéü –ë–æ–ª—å—à–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ ‚Äî –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø–æ–±–µ–¥—É! –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑! üèÜüéÅ\n\n"
        "–ñ–¥—ë–º —Ç–≤–æ–π –≤—ã–±–æ—Ä! ‚¨áÔ∏è"
    )
    await state.set_state(BuySticker.waiting_qty)


@router.message(StateFilter(BuySticker.waiting_qty))
async def process_qty(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    qty = int(text)
    await state.update_data(qty=qty)
    settings = get_settings()
    total = qty * settings["price_per_ticket"]
    if settings["payment_image_file_id"]:
        await message.answer_photo(settings["payment_image_file_id"])
    await message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n\n"
        f"üéâ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {qty} —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É {total:.0f} —Ä—É–±. üí∏\n\n"
        f"üìå –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:\n"
        f" 1. –û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞ üì±\n"
        f" 2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –≤—ã—à–µ\n"
        f" 3. –í–≤–µ–¥–∏ —Å—É–º–º—É {total:.0f} —Ä—É–±. –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        f" 4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ ‚úÖ\n\n"
        f"üîó –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å—Å—ã–ª–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        f"üéüÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ —Å–ª–µ–¥—É–π—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º!\n"
        f"üî• –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! üçÄ"
    )
    await message.answer(
        "üìù –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫!\n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ —Å—Ç–∏–∫–µ—Ä—ã (–±–∏–ª–µ—Ç—ã), –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂.\n\n"
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    await state.set_state(Application.waiting_fio)


@router.message(StateFilter(Application.waiting_fio))
async def process_fio(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º.")
        return
    fio = message.text.strip()
    if len(fio.split()) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return
    await state.update_data(fio=fio)
    await message.answer(
        "üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79000000000:\n\n"
        "‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üëá\n\n"
        "üèÜ –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞"
    )
    await state.set_state(Application.waiting_phone)

@router.message(StateFilter(Application.waiting_phone))
async def process_phone(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    phone = message.text.strip()
    if not (phone.startswith("+") and phone[1:].isdigit()):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=phone)
    await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ:\n\n"
        "‚ÄºÔ∏è –í–∞–∂–Ω–æ:\n"
        "üîπ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–µ–∫ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã.\n"
        "üîπ –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —á—É–∂–∏–µ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —á–µ–∫–∏ ‚Äî –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏ —Å—Ç—Ä–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ –§–ò–û –∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    )
    await state.set_state(Application.waiting_photo)

@router.message(StateFilter(Application.waiting_photo), lambda m: m.content_type in (ContentType.PHOTO, ContentType.DOCUMENT))
async def process_photo(message: types.Message, state: FSMContext, bot: Bot):
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    data = await state.get_data()
    qty = data['qty']
    codes = [uuid.uuid4().hex[:8].upper() for _ in range(qty)]
    await state.update_data(codes=codes)
    code_to_user[codes[0]] = message.from_user.id
    ack_messages[message.from_user.id] = codes[0]
    user_codes[codes[0]] = codes  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏

    codes_str = "\n".join(f"`{c}`" for c in codes)
    text = (
        f"üéü *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
        f"üë§ {data['fio']}\n"
        f"üì± {data['phone']}\n"
        f"üì¶ {qty} —Å—Ç–∏–∫–µ—Ä–æ–≤\n"
        f"üÜî –ö–æ–¥—ã:\n{codes_str}\n"
        f"üñº –§–æ—Ç–æ —á–µ–∫–∞:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{codes[0]}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{codes[0]}")]
    ])
    await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=file_id, caption=text, parse_mode="Markdown", reply_markup=kb)
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
        "–ú—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –ï—Å–ª–∏ –≤—ã –≤—Å—ë —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –±–∏–ª–µ—Ç—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç —É –≤–∞—Å! üéü‚ú®\n\n"
        "‚è≥ –í —Å–≤—è–∑–∏ —Å –æ–ø–ª–∞—Ç–æ–π –±–∞–Ω–∫–∏–Ω–≥–∞ –∏ —Å–≤–µ—Ä–∫–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞ –∏ –Ω–∞–±–µ—Ä–∏—Ç–µ—Å—å –Ω–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è.\n\n"
        "üì© –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç—ë–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üéâ\n\n"
        "‚ùó–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –ø—Ä–æ—à–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
        "@CuttySark_81\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ! –£–¥–∞—á–∏! üçÄ"
    )
    await state.clear()

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–Ø–í–û–ö (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", —Å –≤—ã–¥–∞—á–µ–π –≤—Å–µ—Ö –∫–æ–¥–æ–≤) ---

@router.callback_query(lambda c: c.data.startswith("approve:") or c.data.startswith("reject:"))
async def handle_decision(callback: CallbackQuery, bot: Bot):
    action, code = callback.data.split(":")
    user_id = code_to_user.get(code)
    if not user_id:
        await callback.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if action == "approve":
        codes_list = user_codes.get(code, [code])
        codes_str = "\n".join(f"`{c}`" for c in codes_list)
        msg = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ *–æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n–í–∞—à–∏ –∫–æ–¥—ã:\n{codes_str}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –µ—â—ë —Å—Ç–∏–∫–µ—Ä—ã", callback_data="start_buy")]
        ])
        await bot.send_message(user_id, msg, parse_mode="Markdown", reply_markup=kb)
    else:
        msg = "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ *–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!*"
        await bot.send_message(user_id, msg, parse_mode="Markdown")

    await callback.answer("–ì–æ—Ç–æ–≤–æ.")

# ---------------------------
# –ë–õ–û–ö–ò–†–û–í–ö–ê –õ–Æ–ë–´–• –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –í–ù–ï –°–¶–ï–ù–ê–†–ò–Ø (–°–¢–†–û–ì–û –í –ö–û–ù–¶–ï –§–ê–ô–õ–ê)
# ---------------------------
@router.message(StateFilter(None))
async def block_any_message(message: types.Message, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å '/')
    if message.text and message.text.startswith('/'):
        return
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.from_user.id == ADMIN_ID:
        return
    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–ª–æ–∫–∏—Ä—É–µ–º
    pass
