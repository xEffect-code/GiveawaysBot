from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from config import MANAGER_CHAT_ID
import json
from pathlib import Path
from support_status import is_support_open, set_support_open

router = Router()

MAP_PATH = Path("support_message_map.json")
USER_WARNED_PATH = Path("support_user_warned.json")  # –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

def load_map():
    if MAP_PATH.exists():
        with open(MAP_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_map(data):
    with open(MAP_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

def load_warned():
    if USER_WARNED_PATH.exists():
        with open(USER_WARNED_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_warned(data):
    with open(USER_WARNED_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

message_map = load_map()
user_warned = load_warned()

@router.callback_query(F.data.startswith("support:"))
async def start_support(callback: CallbackQuery):
    set_support_open(callback.from_user.id, True)
    user_warned.pop(str(callback.from_user.id), None)
    save_warned(user_warned)
    await callback.message.answer("‚úâ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.")
    await callback.answer()

@router.message(Command("testsend"))
async def test_send(message: Message):
    try:
        await message.bot.send_message(8069401781, "‚úÖ –¢–µ—Å—Ç: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

@router.message(lambda m: m.chat.type == "private")
async def forward_to_manager(message: Message):
    user_id = message.from_user.id
    if not is_support_open(user_id):
        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é ‚Äî —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_warned.get(str(user_id)):
            await message.answer("–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\" –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")
            user_warned[str(user_id)] = True
            save_warned(user_warned)
        return

    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    header = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({username}) | ID: {user_id} –ø–∏—à–µ—Ç:"

    sent_msg = None
    if message.photo:
        file_id = message.photo[-1].file_id
        sent_msg = await message.bot.send_photo(MANAGER_CHAT_ID, file_id, caption=header)
    elif message.document:
        file_id = message.document.file_id
        sent_msg = await message.bot.send_document(MANAGER_CHAT_ID, file_id, caption=header)
    elif message.video:
        file_id = message.video.file_id
        sent_msg = await message.bot.send_video(MANAGER_CHAT_ID, file_id, caption=header)
    elif message.voice:
        file_id = message.voice.file_id
        sent_msg = await message.bot.send_voice(MANAGER_CHAT_ID, file_id, caption=header)
    else:
        sent_msg = await message.bot.send_message(MANAGER_CHAT_ID, f"{header}\n{message.text}")

    if sent_msg:
        message_map[str(sent_msg.message_id)] = user_id
        save_map(message_map)

    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

@router.message(lambda m: m.chat.id == MANAGER_CHAT_ID and m.reply_to_message is not None)
async def reply_to_user(message: Message):
    reply_msg = message.reply_to_message
    msg_id_str = str(reply_msg.message_id)
    target_id = message_map.get(msg_id_str)

    if not target_id:
        await message.reply("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    try:
        if message.text and not any([message.photo, message.document, message.voice, message.video]):
            await message.bot.send_message(
                target_id,
                f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:*\n{message.text}",
                parse_mode="Markdown"
            )
        elif message.photo:
            await message.bot.send_photo(
                target_id,
                message.photo[-1].file_id,
                caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ñ–æ—Ç–æ)"
            )
        elif message.document:
            await message.bot.send_document(
                target_id,
                message.document.file_id,
                caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–æ–∫—É–º–µ–Ω—Ç)"
            )
        elif message.voice:
            await message.bot.send_voice(
                target_id,
                message.voice.file_id,
                caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (voice)"
            )
        elif message.video:
            await message.bot.send_video(
                target_id,
                message.video.file_id,
                caption="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–≤–∏–¥–µ–æ)"
            )
        else:
            await message.reply("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.")

        await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç (–∑–∞–∫—Ä—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@router.message(Command("endchat"))
async def end_chat(message: Message):
    if message.reply_to_message:
        reply_msg = message.reply_to_message
        msg_id_str = str(reply_msg.message_id)
        target_id = message_map.get(msg_id_str)
        if not target_id:
            await message.reply("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return
        set_support_open(target_id, False)
        await message.reply("‚ùé –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω. –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
