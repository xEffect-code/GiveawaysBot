from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from aiogram.fsm.context import FSMContext
from fsm_states import AdminPanel
from config import ADMIN_ID
from settings import get_settings, update_settings
import referrals
from datetime import datetime
import random
import string

import json

router = Router()

def get_users():
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
        return users
    except Exception:
        return []

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    settings = get_settings()
    price = settings.get("price_per_ticket", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
    photo = settings.get("payment_image_file_id", "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞", callback_data="admin_change_price")],
        [InlineKeyboardButton(text="üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç—ã", callback_data="admin_change_image")],
        [InlineKeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_view_settings")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ref_stats")],
        [InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="admin_pause_ref")],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="admin_start_ref")]
    ])
    text = (
        f"üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üíµ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: <b>{price}</b> —Ä—É–±.\n"
        f"üñº –§–æ—Ç–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{photo}</code>"
    )
    await message.answer(text, reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data == "admin_view_settings")
async def view_settings(callback: CallbackQuery):
    settings = get_settings()
    price = settings.get("price_per_ticket", "–Ω–µ –∑–∞–¥–∞–Ω–æ")
    photo = settings.get("payment_image_file_id", "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    text = (
        f"üíµ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: <b>{price}</b> —Ä—É–±.\n"
        f"üñº –§–æ—Ç–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{photo}</code>"
    )
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_change_price")
async def change_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):")
    await state.set_state(AdminPanel.waiting_new_price)
    await callback.answer()

@router.message(AdminPanel.waiting_new_price)
async def set_price(message: Message, state: FSMContext):
    text = message.text.strip().replace(',', '.')
    try:
        price = float(text)
    except Exception:
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 950)")
    update_settings({"price_per_ticket": price})
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price:.2f} —Ä—É–±.")
    await state.clear()

@router.callback_query(F.data == "admin_change_image")
async def change_image(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.")
    await state.set_state(AdminPanel.waiting_new_image)
    await callback.answer()

@router.message(AdminPanel.waiting_new_image, F.photo)
async def set_image(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    update_settings({"payment_image_file_id": file_id})
    await message.answer("‚úÖ –§–æ—Ç–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.message(AdminPanel.waiting_new_image)
async def wrong_image(message: Message):
    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# --- –†–ê–°–°–´–õ–ö–ê ---

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úâÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é).\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."
    )
    await state.set_state(AdminPanel.waiting_broadcast)
    await callback.answer()

@router.message(AdminPanel.waiting_broadcast, F.photo)
async def receive_broadcast_photo(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏ –ø–æ–¥–ø–∏—Å—å
    await state.update_data(
        broadcast_type="photo",
        file_id=message.photo[-1].file_id,
        caption=message.caption or ""
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ])
    await message.answer_photo(
        message.photo[-1].file_id,
        caption=message.caption or "(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)",
        reply_markup=kb
    )
    await state.set_state(AdminPanel.confirm_broadcast)

@router.message(AdminPanel.waiting_broadcast, F.video)
async def receive_broadcast_video(message: Message, state: FSMContext):
    await state.update_data(
        broadcast_type="video",
        file_id=message.video.file_id,
        caption=message.caption or ""
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ])
    await message.answer_video(
        message.video.file_id,
        caption=message.caption or "(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)",
        reply_markup=kb
    )
    await state.set_state(AdminPanel.confirm_broadcast)

@router.message(AdminPanel.waiting_broadcast)
async def receive_broadcast_text(message: Message, state: FSMContext):
    await state.update_data(
        broadcast_type="text",
        text=message.text
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ])
    await message.answer(
        f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}",
        reply_markup=kb
    )
    await state.set_state(AdminPanel.confirm_broadcast)

@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users = get_users()
    success = 0
    failed = 0

    await callback.message.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

    for user_id in users:
        try:
            if data.get("broadcast_type") == "photo":
                await callback.bot.send_photo(
                    user_id, data["file_id"], caption=data.get("caption", "")
                )
            elif data.get("broadcast_type") == "video":
                await callback.bot.send_video(
                    user_id, data["file_id"], caption=data.get("caption", "")
                )
            elif data.get("broadcast_type") == "text":
                await callback.bot.send_message(
                    user_id, data["text"]
                )
            success += 1
        except (TelegramBadRequest, TelegramForbiddenError):
            failed += 1
        except Exception:
            failed += 1

    await callback.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed}")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "admin_ref_stats")
async def admin_ref_stats(callback: CallbackQuery):
    data = referrals.load_data()
    lines = []
    for ref_id, info in data["referrers"].items():
        lines.append(f"üë§ {ref_id}: {len(info['referred'])} –ø—Ä–∏–≥., {len(info['tickets'])} –±–∏–ª–µ—Ç–æ–≤")
    text = "üìä <b>–í—Å–µ —Ä–µ—Ñ. –∞–∫–∫–∞—É–Ω—Ç—ã</b>\n\n" + "\n".join(lines)
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_pause_ref")
async def admin_pause_ref(callback: CallbackQuery):
    data = referrals.load_data()

    # —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –∏ –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
    total_part = sum(len(v["referred"]) for v in data["referrers"].values())
    total_tix  = sum(len(v["tickets"])  for v in data["referrers"].values())

    # –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    data["active"] = False
    data["history"].append({
        "action": "paused",
        "time": datetime.utcnow().isoformat(),
        "participants": total_part,
        "tickets": total_tix
    })
    referrals.save_data(data)

    # –≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å ¬´—à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–º–∏¬ª –∫–æ–¥–∞–º–∏
    lines = []
    for ref_id, info in data["referrers"].items():
        if not info["tickets"]:
            continue
        # –ø–æ–ª—É—á–∞–µ–º –∏–º—è/username
        try:
            member = await callback.bot.get_chat_member(chat_id=int(ref_id), user_id=int(ref_id))
            username = f"@{member.user.username}" if member.user.username else member.user.full_name
        except:
            username = f"id{ref_id}"
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É –Ω–∞ –∫–∞–∂–¥—ã–π –±–∏–ª–µ—Ç
        codes = [
            "".join(random.choices(string.ascii_uppercase + string.digits, k=6))
            for _ in info["tickets"]
        ]
        lines.append(f"{username}: {', '.join(codes)}")

    detail_text = "\n".join(lines) or "‚Äî –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ ‚Äî"

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω—É
    await callback.message.answer(
        (
            f"‚è∏Ô∏è <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{total_part}</b>\n"
            f"üé´ –í—ã–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤: <b>{total_tix}</b>\n\n"
            f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∏—Ö –∫–æ–¥—ã:</b>\n"
            f"{detail_text}"
        ),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_start_ref")
async def admin_start_ref(callback: CallbackQuery):
    data = referrals.load_data()
    data["active"] = True
    # —á–∏—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    for info in data["referrers"].values():
        info["tickets"] = []
    data["history"].append({
        "action": "started",
        "time": datetime.utcnow().isoformat()
    })
    referrals.save_data(data)
    await callback.message.answer("‚ñ∂Ô∏è –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω. –°—á–µ—Ç—á–∏–∫–∏ –±–∏–ª–µ—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã.")
    await callback.answer()

